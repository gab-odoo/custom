<?xml version="1.0" encoding="utf-8"?>
<openerp>
<data noupdate="0">

    <!-- Landing page -->
    <record id="welcome" model="ir.actions.server">
        <field name="name">B2B Home Page</field>
        <field name="condition">True</field>
        <field name="website_published" eval="True"/>
        <field name="model_id" ref="website.model_website"/>
        <field name="code">
user_obj = pool['res.users']
is_user = user_obj.has_group(cr, uid, 'base.group_user') or user_obj.has_group(cr, uid, 'website_b2b.group_user_portal')
if not is_user:
    response = request.website.render("website_b2b.401")

else:
    # search for the portal user and its location

    location_obj = pool['stock.location']
    partner_location_ids = location_obj.search(cr, uid, [
        ('partner_id', '=', user.partner_id.id)
    ], context=context)

    location = None
    if partner_location_ids:
        location = location_obj.browse(cr, uid, partner_location_ids[0], context=context)

    response = request.website.render("website_b2b.welcome_page", {
        'user': user,
        'location': location
    })
        </field>
        <field name="state">code</field>
        <field name="type">ir.actions.server</field>
    </record>

    <!-- Report Sales/Inventory -->
    <record id="report" model="ir.actions.server">
        <field name="name">B2B Report Sales/Stock</field>
        <field name="condition">True</field>
        <field name="website_published" eval="True"/>
        <field name="model_id" ref="website.model_website"/>
        <field name="code">
product_obj = pool['product.product']
location_obj = pool['stock.location']
user_obj = pool['res.users']
is_user = user_obj.has_group(cr, uid, 'base.group_user') or user_obj.has_group(cr, uid, 'website_b2b.group_user_portal')
if not is_user:
    response = request.website.render("website_b2b.401")

else:
    partner_location_ids = location_obj.search(cr, uid, [
        ('partner_id', '=', user.partner_id.id)
    ], context=context)

    if not partner_location_ids:
        response = request.website.render("website_b2b.debug", {
            'data': 'No location associated with this partner'
        })

    else:
        partner_location_id = partner_location_ids[0]

        # updating context gives us the good stock number for the location
        context.update({
            'location': partner_location_id
        })

        mode = request.params['mode'] if 'mode' in request.params else None
        domain = [
            ('x_b2b_available', '=', True),
            ('qty_available', '>=', 0)
        ]
        products_ids = product_obj.search(cr, uid, domain, context=context)
        products = product_obj.browse(cr, uid, products_ids, context=context)
        response = request.website.render("website_b2b.sales_inventory_page", {
            'products': products,
            'mode': mode
        })
        </field>
        <field name="state">code</field>
        <field name="type">ir.actions.server</field>
    </record>

    <!-- Create DO and Invoice  -->
    <record id="invoice" model="ir.actions.server">
        <field name="name">B2B Invoice</field>
        <field name="condition">True</field>
        <field name="website_published" eval="True"/>
        <field name="model_id" ref="stock.model_stock_picking"/>
        <field name="code">
form_data = request.params
user_obj = pool['res.users']
location_obj = pool['stock.location']
product_obj = pool['product.product']
move_obj = pool['stock.move']
imd = pool['ir.model.data']
config_obj = pool['ir.config_parameter']

is_user = user_obj.has_group(cr, uid, 'base.group_user') or user_obj.has_group(cr, uid, 'website_b2b.group_user_portal')
if not is_user:
    response = request.website.render("website_b2b.401")

elif form_data:
    partner_location_ids = location_obj.search(cr, uid, [
        ('partner_id', '=', user.partner_id.id)
    ], context=context)

    if not partner_location_ids:
        response = request.website.render("website_b2b.debug", {
            'data': 'No location associated with this partner'
        })

    else:
        partner_location_id = partner_location_ids[0]
        mode = form_data.pop('mode')
        lines = list()

        # updating context gives us the good stock number for the location
        context.update({
            'location': partner_location_id
        })
        location_id = partner_location_id
        # handling the reporting

        # each sale must be added to a delivery order
        customer_location_id = location_obj.search(cr, uid, [
            ('usage', '=', 'customer')
        ], context=context, limit=1, order='id')[0]

        if mode == "sales":
            for id in form_data.keys():
                if form_data[id]:
                    try:
                        qty = int(form_data[id])
                    except:
                        qty = 0
                    if qty > 0:
                        p = product_obj.browse(cr, uid, int(id), context=context)
                        lines.append({
                            'name': p.name,
                            'product_uom': p.uom_id.id,
                            'product_id': int(id),            # id du produit
                            'location_id': partner_location_id,
                            'location_dest_id': customer_location_id,  # partner location customers
                            'product_uom_qty': qty
                        })

        # each inventory move must be associated with a delivery order
        if mode == "inventory":
            domain = [('x_b2b_available', '=', True)]
            products = product_obj.browse(cr, uid, product_obj.search(cr, uid, domain, context=context), context=context)
            for p in products:
                try:
                    encoded = int(form_data.get(str(p.id)))
                except:
                    encoded = 0
                    form_data[str(p.id)] = "0" # for displaying purposes only
                if encoded &lt; 0:
                    encoded = 0

                difference = p.qty_available - encoded
                if difference:
                    lines.append({
                        'name': p.name,
                        'product_uom': p.uom_id.id,
                        'product_id': int(p.id),
                        'location_id': location_id,
                        'location_dest_id': customer_location_id,              # partner location customers
                        'product_uom_qty': difference,
                    })

        if lines:
            location_id = partner_location_id
            location_dest_id = customer_location_id
            _, picking_type_id = imd.get_object_reference(cr, uid, 'website_b2b', 'b2b_stock_picking_out')
            vals = {
                'origin': 'B2B Portal',
                'picking_type_id': picking_type_id,
                'move_type': 'direct',
                'state': 'draft',
                'partner_id': user.partner_id.id,
                'move_lines': [(0, 0, l) for l in lines],
                'location_id': location_id,
                'location_dest_id': location_dest_id,
                #'invoice_state': '2binvoiced',
                #'message_follower_ids': [user.partner_id.id]
            }

            new_delivery_order_id = self.create(cr, uid, vals, context=context)
            do = self.browse(cr, uid, new_delivery_order_id, context=context)

            # compute data for presentation
            total = 0.0
            for line in do.move_lines:
                total += line.product_qty * line.product_id.lst_price

            response = request.website.render("website_b2b.invoice_page", {
                'do': do,
                'mode': mode,
                'total': total,
                'stock_reported_by_you': form_data
            })

        else:
            response = request.website.render("website_b2b.invoice_page", {
                'do': None,
                'mode': mode,
                'total': 0.0,
                'stock_reported_by_you': form_data
            })
        </field>
        <field name="state">code</field>
        <field name="type">ir.actions.server</field>
    </record>

    <!-- Confirm DO and Invoice -->
    <record id="confirm_do_new_delivery" model="ir.actions.server">
        <field name="name">B2B Create Delivery Order</field>
        <field name="condition">True</field>
        <field name="website_published" eval="True"/>
        <field name="model_id" ref="stock.model_stock_picking"/>
        <field name="code">
form_data = request.params
user_obj = pool['res.users']
location_obj = pool['stock.location']
product_obj = pool['product.product']
journal_obj = pool['account.journal']
move_obj = pool['stock.move']
config_obj = pool['ir.config_parameter']
invoice_obj = pool['account.invoice']


is_user = user_obj.has_group(cr, uid, 'base.group_user') or user_obj.has_group(cr, uid, 'website_b2b.group_user_portal')
if not is_user:
    response = request.website.render("website_b2b.401")

elif form_data:
    delivery_order_id = int(form_data['stock.picking_id'])
    delivery_order = self.browse(cr, uid, delivery_order_id, context=context)
    if delivery_order.state == 'draft':
        delivery_order.action_confirm()
        if delivery_order.state != 'assigned':
            delivery_order.action_assign()
    for pack in delivery_order.pack_operation_ids:
        if pack.product_qty > 0:
            pack.write({'qty_done': pack.product_qty})
        else:
            pack.unlink()
    delivery_order.do_transfer()


    # set DO and move lines as to be invoiced
    self.write(cr, uid, delivery_order_id, {
        'invoice_state': '2binvoiced'
    })
    move_obj.write(cr, uid, [move.id for move in self.browse(cr, uid, delivery_order_id).move_lines], {
        'invoice_state': '2binvoiced'
    })

    # create and validate an invoice for the DO
    journal_ids = journal_obj.search(cr, uid, [
        ('type', '=', 'sale')
    ])
    #Create new invoice
    picking=self.browse(cr,uid,delivery_order_id,context=context)
    invoice = env['account.invoice'].create({
        'name':picking.name,
        'date_invoice':time.strftime('%Y-%m-%d'),
        'partner_id':picking.partner_id.id,
        'account_id':picking.partner_id.property_account_payable_id.id,
    })

    #Add the lines
    for d_line in picking.move_lines:
        i_line_value={
        'product_id':d_line.product_id.id,
        'name':d_line.product_id.description if d_line.product_id.description else d_line.product_id.name,
        'invoice_id':invoice.id,
        'quantity':d_line.product_uom_qty,
        'price_unit':d_line.product_id.list_price,
        'account_id':d_line.product_id.property_account_income_id.id if d_line.product_id.property_account_income_id else d_line.product_id.categ_id.property_account_income_categ_id.id,
        'uom_id':d_line.product_uom.id,
        }
        invoice.invoice_line_ids.create(i_line_value)



    handling = config_obj.search(cr, uid, [('key', '=', 'B2B Handling Product ID')])
    handling_id = int(config_obj.browse(cr, uid, handling, context=context).value)
    handling_product = product_obj.browse(cr, uid, handling_id, context=context)
    inv_id = invoice_obj.browse(cr, uid, invoice.id, context=None)
    inv_id.write({'invoice_line_ids': [
                    (0, 0, {
                        'product_id': handling_product.id,
                        'name': handling_product.name,
                        'quantity': 1.0,
                        'price_unit': handling_product.lst_price,
                        'account_id':d_line.product_id.property_account_income_id.id if d_line.product_id.property_account_income_id else d_line.product_id.categ_id.property_account_income_categ_id.id,
                        'invoice_line_tax_id': [(6,0,[t.id for t in handling_product.taxes_id])],
                    })]
        })

    workflow.trg_validate(uid, 'account.invoice', invoice.id, 'invoice_open', cr)

partner_location_ids = location_obj.search(cr, uid, [
    ('partner_id', '=', user.partner_id.id)
], context=context)

if not partner_location_ids:
    response = request.website.render("website_b2b.debug", {
        "data": "No location associated with this partner"
    })

else:
    partner_location_id = partner_location_ids[0]

    # updating context gives us the good stock number for the location
    context.update({
        'location': partner_location_id
    })

    domain = [
        ('x_b2b_available', '=', True)
    ]
    products = product_obj.browse(cr, uid, product_obj.search(cr, uid, domain, context=context), context=context)
    response = request.website.render("website_b2b.new_delivery_page", {
        'products': products,
        'location_id': partner_location_id
    })
        </field>
        <field name="state">code</field>
        <field name="type">ir.actions.server</field>
    </record>

    <!-- Last order validation -->
    <record id="finish" model="ir.actions.server">
        <field name="name">B2B Create Delivery Order</field>
        <field name="condition">True</field>
        <field name="website_published" eval="True"/>
        <field name="model_id" ref="stock.model_stock_picking"/>
        <field name="code">
form_data = request.params
user_obj = pool['res.users']
location_obj = pool['stock.location']
product_obj = pool['product.product']
invoice_obj = pool['account.invoice']
picking_obj = pool['stock.picking']
imd = pool['ir.model.data']
config_obj = pool['ir.config_parameter']
response = None

is_user = user_obj.has_group(cr, uid, 'base.group_user')
if not is_user:
    response = request.website.render("website_b2b.401")

elif form_data:
    partner_location_ids = location_obj.search(cr, uid, [
        ('partner_id', '=', user.partner_id.id)
    ], context=context)

    if not partner_location_ids:
        response = request.website.render("website_b2b.debug", {
            "data": "No location associated with this partner"
        })

    else:
        location_id = int(config_obj.get_param(cr, uid, 'B2B Stock Location ID', context=None))
        partner_location = location_obj.browse(cr, uid, partner_location_ids[0], context=context)
        # compute auto-targeted deliveries + additional qties
        products = product_obj.browse(cr, uid, product_obj.search(cr, uid, [], context=context), context=context)
        lines = list()
        for p in products:
            if ("delivery_%d" % p.id) in form_data and ("additionnal_%d" % p.id) in form_data:
                    try:
                        delivery_qty = int(form_data["delivery_%d" % p.id])
                    except:
                        delivery_qty = 0
                    try:
                        additionnal_qty = int(form_data["additionnal_%d" % p.id])
                    except:
                        additionnal_qty = 0
                    if delivery_qty + additionnal_qty:
                        lines.append({
                            'name': 'B2B Reordering',
                            'product_uom': p.uom_id.id,
                            'product_id': p.id,  # id du produit
                            'location_id': location_id,  # B2B out location
                            'location_dest_id': partner_location.id,
                            'product_uom_qty': delivery_qty + additionnal_qty,
                        })

        if lines:
            _ , picking_type_id = imd.get_object_reference(cr, uid, 'gab_custom', 'pvs_picking_type')

            carrier_obj = pool['delivery.carrier']
            first_carrier_ids = carrier_obj.search(cr, uid, [], context=context, order='id', limit=1)
            first_carrier_id = first_carrier_ids and first_carrier_ids[0] or []
            vals_delivery_order = {
                'origin': 'B2B Portal',
                'picking_type_id': picking_type_id,
                'move_type': 'direct',
                'state': 'draft',
                'partner_id': user.partner_id.id,
                'move_lines': [(0, 0, l) for l in lines],
                'carrier_id': first_carrier_id,                             # id of carrier/delivery method
                'location_id': location_id,
                'location_dest_id': partner_location.id,
                #'message_follower_ids': [user.partner_id.id]
            }
            new_delivery_order_id = self.create(cr, uid, vals_delivery_order, context=context)
            do = self.browse(cr, uid, new_delivery_order_id, context=context)
            if do.state == 'draft':
                do.action_confirm()
                if do.state != 'assigned':
                    do.action_assign()


            response = request.website.render("website_b2b.final_do_page", {
                "do": do,
                "inv": None
            })

        else:
            response = request.website.render("website_b2b.final_do_page", {
                "do": None,
                "inv": None
            })
        </field>
        <field name="state">code</field>
        <field name="type">ir.actions.server</field>
    </record>

    <!-- Overview -->
    <record id="overview" model="ir.actions.server">
        <field name="name">B2B Overview</field>
        <field name="condition">True</field>
        <field name="website_published" eval="True"/>
        <field name="model_id" ref="website.model_website"/>
        <field name="code">
imd = pool['ir.model.data']
_ , picking_type_id = imd.get_object_reference(cr, uid, 'gab_custom', 'pvs_picking_type')
user_obj = pool['res.users']
is_user = user_obj.has_group(cr, uid, 'base.group_user') or user_obj.has_group(cr, uid, 'website_b2b.group_user_portal')
if not is_user:
    response = request.website.render("website_b2b.401")

else:
    location_obj = pool['stock.location']
    partner_location_ids = location_obj.search(cr, uid, [
        ('partner_id', '=', user.partner_id.id)
    ], context=context)

    if not partner_location_ids:
        response = request.website.render("website_b2b.debug", {
            "data": "No location associated with this partner"
        })

    else:
        picking_obj = pool['stock.picking']
        open_deliveries = picking_obj.browse(cr, uid, picking_obj.search(cr, uid, [
            ('partner_id', '=', user.partner_id.id),
            ('picking_type_id', '=', picking_type_id),
            ('state', 'not in', ['done', 'cancel']),
        ], context=context), context=context)
        completed_deliveries = picking_obj.browse(cr, uid, picking_obj.search(cr, uid, [
            ('partner_id', '=', user.partner_id.id),
            ('picking_type_id', '=', picking_type_id),
            ('state', '=', 'done'),
        ], context=context), context=context)
        returns = picking_obj.browse(cr, uid, picking_obj.search(cr, uid, [
            ('partner_id', '=', user.partner_id.id),
            ('picking_type_id.code', '=', 'incoming')
        ], context=context), context=context)

        invoice_obj = pool['account.invoice']
        invoices = invoice_obj.browse(cr, uid, invoice_obj.search(cr, uid, [
            ('partner_id', '=', user.partner_id.id),
            ('state', 'in', ['open', 'paid']),
            ('type', '=', 'out_invoice')
        ], context=context), context=context)
        overdues = dict()
        for inv in invoices:
            if inv.date_due:
                overdues[inv.id] = inv.state == 'open' and datetime.datetime.strptime(inv.date_due, "%Y-%m-%d") &lt; datetime.datetime.now()
            else:
                overdues[inv.id] = False

        partner_location_id = partner_location_ids[0]
        context.update({
            'location': partner_location_id
        })      ## The line that changes the values of product.product ifo the location
        product_obj = pool['product.product']
        stock = product_obj.browse(cr, uid, product_obj.search(cr, uid, [], context=context), context=context)
        move_obj = pool['stock.move']
        products_already_ordered = set([p.product_id for p in move_obj.browse(cr, uid, move_obj.search(cr, uid, [
            ('location_dest_id', '=', partner_location_id)
        ], context=context),context=context)])
        stock_ordered_or_target = [product for product in stock if (product in products_already_ordered) or (product.orderpoint_ids and product.orderpoint_ids[0].location_id.id == partner_location_id)]

        data = {
            'location_id': partner_location_id,
            'open_deliveries': open_deliveries,
            'completed_deliveries': completed_deliveries,
            'returns': returns,
            'invoices': invoices,
            'stock': stock_ordered_or_target,
            'overdues': overdues
        }
        response = request.website.render("website_b2b.partner_overview_page", data)
        </field>
        <field name="state">code</field>
        <field name="type">ir.actions.server</field>
    </record>

    <record id="b2bmenu" model="website.menu">
        <field name="name">B2B portal</field>
        <field name="url">/website/action/website_b2b.welcome</field>
        <field name="parent_id" ref="website.main_menu"/>
        <field name="sequence">10</field>
    </record>

</data>
</openerp>

<!--
    DEBUG:
    __import__('pdb').set_trace()
    This line should work if 'pdb' is appended to the list_ALLOWED_MODULES in odoo/openerp/tools/safe_eval.py
    (this introduces a security breach; DO NOT USE IN PRODUCTION)


    NOTES:
    - the user must be associated with a location (choose the first one)
    - the users must be in the "Warehouse / User" + "Invoicing" + "Sales Manager" & be careful to "Portal" security group
    - if there are more than 1 orderpoint for a pair (product/location), the first one will be use
-->
